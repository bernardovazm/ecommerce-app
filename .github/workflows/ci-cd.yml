name: CI/CD Pipeline with SonarCloud Analysis

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  sonarcloud-backend:
    name: SonarCloud Analysis - Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "temurin"

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Restore dependencies
        run: dotnet restore api/Ecommerce.sln

      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"seu-usuario_ecommerce-api" /o:"sua-organizacao" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
          dotnet build api/Ecommerce.sln --no-restore
          # dotnet test api/Ecommerce.sln --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults/ --logger "trx;LogFileName=test_results.trx" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  sonarcloud-frontend:
    name: SonarCloud Analysis - Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: |
          cd web
          npm ci

      - name: Run ESLint
        run: |
          cd web
          npm run lint

      - name: Run tests with coverage
        run: |
          cd web
          npm run test:coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: web
          args: >
            -Dsonar.projectKey=seu-usuario_ecommerce-web
            -Dsonar.organization=sua-organizacao
            -Dsonar.sources=src
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/*.test.js,**/*.test.jsx,**/*.spec.js,**/*.spec.jsx
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.test.js,**/*.test.jsx,**/*.spec.js,**/*.spec.jsx
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build Backend
        run: |
          cd api
          dotnet restore
          dotnet build --no-restore

      - name: Build Frontend
        run: |
          cd web
          npm ci
          npm run build

      - name: Run Backend Tests
        run: |
          cd api
          # dotnet test --no-build --verbosity normal
          echo "Tests would run here"

      - name: Run Frontend Tests
        run: |
          cd web
          npm run test
